#!/usr/bin/env bash
#
# Setups parse-server, in an easy fashion
# Used for running Test Cases against the parse-php-sdk
#

# Verify we are not already running
if [ -f "`dirname $0`/pid.txt" ];
then
    PID=$(<"`dirname $0`/pid.txt")
    if [ ! "$PID" = "" ];
    then
        # server already running
        echo "
parse-server appears to be already running under process [$PID]

Run 'npm stop' first to shut it down.
"
        exit 0

    fi

fi

echo "* starting mongodb"

# Start MongoDB
mongodb-runner start

# space out commands from mongodb-runner
echo "
"

# generated log file for this test instance, does NOT rotate
LOG_FILE="parse-server-`date '+%m-%d-%Y'`.log"
LOG_PATH="`dirname $0`/"

# Writes the server PID out once finished starting up
function writePID {

    # wait until the log file is created
    while [ ! -f "$1" ];
    do
        sleep 1

    done

    # wait for parse to start logging
    OUTPUT=$(<"$1")
    while [ "$OUTPUT" = "" ];
    do
        sleep 1
        OUTPUT=$(<"$1")

    done

    # Verify we could start
    if [ "$OUTPUT" = "Unable to listen on port 1337. The port is already in use." ];
    then
        # unable to listen, write out an empty PID
        echo "" > "`dirname $0`/pid.txt"
        return

    fi

    # setup regex
    GREP_REGEX="\[[0-9]+\] parse-server running"

    # get line in question containing our PID
    PID=`cat "$1" | egrep "$GREP_REGEX"`

    # wait for our server running line to load up
    while [ "$PID" = "" ];
    do
        sleep 1
        PID=`cat "$1" | egrep "$GREP_REGEX"`

    done

    # Pull out just the first part, containing the PID
    PID=($PID)

    # convert [] to pipes
    PID=$(echo "$PID"|tr -d "[\`|")
    PID=$(echo "$PID"|tr -d "]\`|")

    # split on pipes to get our PID
    PID=`echo $PID | cut -d '|' -f 2`

    # write out our PID
    echo "$PID" > "`dirname $0`/pid.txt"

}

echo "* starting parse-server"

# Start ParseServer from the command line, note we are using cloud code as well
parse-server config.json --startLiveQueryServer true > "$LOG_PATH$LOG_FILE" 2>&1 & writePID "$LOG_PATH$LOG_FILE" &

# loop until the pid exists
while [ ! -f "`dirname $0`/pid.txt" ];
do
    sleep 1

done

# loop until the PID is written out
PID=$(<"`dirname $0`/pid.txt")
while [ "$PID" = "" ];
do
    sleep 2

    # verify our log file
    OUTPUT=$(<"$LOG_PATH$LOG_FILE")
    if [ "$OUTPUT" = "Unable to listen on port 1337. The port is already in use." ];
    then
        # unable to listen, write out an empty PID
        echo "
Unable to start Parse Server on port 1337. The port is already in use.
"
        # shut down mongodb-runner
        mongodb-runner stop

        exit 0

    fi

    PID=$(<"`dirname $0`/pid.txt")
done

echo "
[Parse Server Started with PID $PID]
Logging to $LOG_FILE
"

exit 0
